#!/usr/bin/env node
"use strict"; function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }var _chunkM3JU5DW7cjs = require('./chunk-M3JU5DW7.cjs');var _stdiojs = require('@modelcontextprotocol/sdk/server/stdio.js');var _util = require('util');var{version:v}=_chunkM3JU5DW7cjs.a;async function S(){let{values:{["access-token"]:s,["read-only"]:n,["api-url"]:t,["version"]:a}}=_util.parseArgs.call(void 0, {options:{"access-token":{type:"string"},"read-only":{type:"boolean",default:!1},"api-url":{type:"string"},version:{type:"boolean"}}});a&&(console.log(v),process.exit(0));let e=_nullishCoalesce(s, () => (process.env.SUPABASE_ACCESS_TOKEN));e||(console.error("Please provide a personal access token (PAT) with the --access-token flag or set the SUPABASE_ACCESS_TOKEN environment variable"),process.exit(1));let c=_chunkM3JU5DW7cjs.b.call(void 0, {platform:{accessToken:e,apiUrl:t},readOnly:n}),i=new _stdiojs.StdioServerTransport;await c.connect(i)}S().catch(console.error);
//# sourceMappingURL=stdio.cjs.map